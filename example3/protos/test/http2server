#! /usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path("../", __FILE__)

require 'socket'
require 'http/2'
require 'hello_services_pb'

def process(sock)
  conn = HTTP2::Server.new
  conn.on(:frame) { |bytes| sock << bytes }
  conn.on(:frame_received) { |f| puts f.inspect }

  conn.on(:stream) do |stream|
    puts "new stream"
    header = []
    buffer = []

    stream.on(:ping) { puts 'pong' }

    stream.on(:headers) { |h| header.push(*h) }
    stream.on(:data) { |d| buffer << d }

    stream.on(:half_close) do
      puts header.inspect
      puts buffer.inspect

      stream.headers(
        [[':status', '200'], ['content-type', 'application/grpc+proto']],
        end_stream: false, end_headers: false
      )
      pb = Hello::Reply.new(message: 'reply')
      pb_data = pb.to_proto
      compressed = 0
      flags = [compressed, pb_data.bytesize]
      data = flags.pack("CN") + pb_data
      puts "Send Data: #{data.inspect}"
      stream.data(data, end_stream: false)
      stream.headers([['grpc-status', '0']], end_stream: true, end_headers: true)
    end
  end

  loop do
    begin
      data = sock.read_nonblock(4096)
      break unless data
      puts "<- #{data.inspect}"
      conn << data
    rescue IO::EAGAINWaitReadable
      r, _ = IO.select([sock], nil, nil, 10)
      break unless r
    rescue EOFError
      break
    end
  end
end

puts "start"
Socket.tcp_server_loop('127.0.0.1', 50051) do |sock, addr|
  puts "new connection"
  begin
    process(sock)
  rescue => e 
    puts e.message
    puts e.backtrace.join("\n")
  end
  puts "end connection"
end
